<?php
/**
 * Copyright 1999 - 2004 by Gero Kohnert
 *
 *  CVS Info:  $Id$
 *  $Author$
 *
 * @modulegroup address
 * @module address
 */

global $calpath,$callink;
include_once $calpath .'location.pinc';

/**
 * a person (names and birthday)
 *
 * @package address
 */
class tutos_address extends tutos_base {

  /* ---------------------------------------------------------------------------
   */
  function tutos_address(&$dbconn) {
    global $lang,$current_user,$tutos;


    $this->init($dbconn);
    $this->larray = array();
    $this->birthday = new DateTime(0);
    $this->f_name   = "";
    $this->l_name   = "";
    $this->m_name   = "";
    $this->title    = "";
    $this->pic_id   = -1;
    if (class_exists('tutos_file')) {
      $this->pic_file = new tutos_file($this->dbconn);
    } else {
      $this->pic_file = -1;
    }
    $this->rl1 = false;
    $this->rl2 = false;
	if (isset($dbconn)) {
      $this->tablename = $this->dbconn->prefix ."addresses";
	}
    $this->user = 0;
  }

  /**
   * fill the object data with a given resultset
   *
   * @param Object $r    a result set object 
   * @param int    $pos  a index in the resultset
   */
  function read_result(&$r,$pos) {
    global $g_hash;

    if ( ! isset($pos) ) return;

    $this->id       = $r->get($pos, "id");

    $this->larray[] = "title";
    $this->larray[] = "l_name";
    $this->larray[] = "f_name";
    $this->larray[] = "m_name";

    foreach($this->larray as $f) {
      $this->$f = $r->get($pos, $f);
      if (!isset($this->$f)) {
        $this->$f = "";
      }
    }

    $this->birthday->setDateTime($r->get($pos, "birthday"),1);

    $this->pic_id = $r->get($pos, "pic_id");

    $cid = $r->get($pos, "creator");
    if ( isset($cid) )  {
      if ( $cid != $this->id )  {
        $this->creator     = getObject($this->dbconn,$cid);
      } else {
        $this->creator = $this;
      }
    }
    $this->read_locs();
    parent::read_result($r,$pos);
#    acl_read($this);
#    $g_hash[$this->id] = &$this;
  }
  /**
   * Read picture object
   */
  function read_picture () {
    if ( $this->pic_id < 1 ) {
      return;
    }
    if ( $this->pic_file == -1 ) {
      return;
    }
    $this->pic_file = $this->pic_file->read($this->pic_id,$this->pic_file);
  }

  /**
   * Read all locations references
   */
  function read_locs () {
    if ( ! class_exists ("location") ) {
      require("location.pinc");
    }
    read_locs($this);
  }

  /**
   * Read all locations data
   */
  function read_locs_data () {
    if ( ! class_exists ("location") ) {
      require("location.pinc");
    }
    read_locs_data($this);
  }
  /**
   * search for a address 
   * return a array of possible addresses
   */
  function search_by_name(&$arr,&$user,$name) {
	if ( trim($name) == "" ) return;

    $q = "SELECT * from ". $user->dbconn->prefix ."addresses WHERE". $user->dbconn->Like ("f_name",$name,"m_name","l_name");
    $q .= " OR ". $user->dbconn->Like ("l_name",$name,"f_name","m_name");
    $q .= " order by l_name ";
    check_dbacl( $q, $user->id);
    $r = $user->dbconn->Exec($q);
    $n = $r->numrows();
	$a = 0;
    while ( $a < $n ) {
      $x = new tutos_address($user->dbconn);
      $x->read_result($r,$a);
	  $arr[$x->id] = &$x;
#	  echo $x->getFullName() ."<br />";
	  unset($x);
      $a++;
    }
    $r->free();

    return;
  }
  /**
   * Return the Short Name if useful
   */
  function getShortname() {
    global $lang;
    if ( trim($this->l_name) == "" ) {
      return sprintf($lang['AdrFormatShort1'],$this->f_name, $this->m_name);
    }
    return sprintf($lang['AdrFormatShort2'],substr($this->f_name,0,1), $this->l_name);
  }
  /**
   * Return the Long Name
   */
  function getFullname() {
    global $lang;
    if ( $this->m_name != "") {
      return sprintf($lang['AdrFormat1'],$this->f_name, $this->m_name ,$this->l_name);
    } else {
      return sprintf($lang['AdrFormat2'],$this->f_name, $this->l_name);
    }
  }
  /**
   * get the info as text
   */
  function getAsText (&$lang) {
    $r = "";
    $r .= format_asText($lang['AdrName'],$this->getFullName());
    $r .= format_asText($lang['AdrBirthday'],$this->birthday->getDate());
    return $r;
  }
  /**
   * Returns HTML for popup infos
   */
  function getPopInfo() {
    global $lang;

    $fn =myentities($this->getFullName());
    $fn =str_replace("'","\'",$fn);

    $this->read_locs_data();
    $info = "";
    $info .= "<html>";
    $info .= "<body>";
    $info .= "<table class=\"single\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\">";
    $info .= "<tr><th colspan=\"2\">". $fn ."</th></tr>";
    $info .= "<tr><td valign=\"top\"><font size=\"-2\">". $lang['Phone'] .":</font></td><td><font size=\"-2\">";

    if ( isset($this->location) ) {
      @reset($this->location);
      $pre = "";
      while( list ($i,$f) = @each ($this->location)) {
        if ( $f->phone_1 != "" ) {
          $info .= $pre . myentities($f->phone_1);
          $pre = "<br />";
        }
        if ( $f->phone_2 != "" ) {
          $info .= $pre . myentities($f->phone_2);
          $pre = "<br />";
        }
      }
    }
    $info .= "</font>&nbsp;</td></tr>";
    $info .= "</table>";
    $info .= "</body>";
    $info .= "</html>";
    return $info;
  }
  /**
   * set the title
   */
  function setTitle($new) {
    $this->setStrField("title",$new,"AdrTitle");
  }
  /**
   * set the first name
   */
  function setFName($value) {
    $this->setStrField("f_name",$value,"AdrFirstName");
  }
  /**
   * set the last name
   */
  function setLName($value) {
    $this->setStrField("l_name",$value,"AdrLastName");
  }
  /**
   * set the middle name
   */
  function setMName($value) {
    $this->setStrField("m_name",$value,"AdrMiddleName");
  }
  /**
   * set the birthday date
   */
  function setBirthday(&$name) {
    $a = $this->birthday->getYYYYMMDD();
    $b = $name->getYYYYMMDD();

    if ( $a != $b ) {
      $this->modified[] = array ( "field" => "AdrBirthday", "old" => $a , "new" => $b );
      $this->birthday = $name;
    }
    return;
  }
  /**
   * save the objects data to the database
   */
  function save () {
    global $table,$current_user, $tutos;

    $msg = "";
    $q = new query($this->dbconn);
    $q->setTable($this->tablename);
    $q->addFV("birthday",$this->birthday,"DATE");
    $q->addFV("title",$this->title,"STRING",$table['address']['title'][size]);
    $q->addFV("f_name",$this->f_name,"STRING",$table['address']['f_name'][size]);
    $q->addFV("m_name",$this->m_name,"STRING",$table['address']['m_name'][size]);
    $q->addFV("l_name",$this->l_name,"STRING",$table['address']['l_name'][size]);
    $q->addFV("pic_id",$this->pic_id,"INT");

    if ( $this->id < 0 ) {
      $this->modified = array();
      if ( isset($this->newid) ) {
        $this->id = $this->newid;
        $q->addFV("id",$this->id,"");
      } else {
        /* Get an new ID */
        $this->id = $q->addFV("id",-1,"NEXTID");
        # Defaut Access Control
        $this->acl[$this->id]          = $tutos[modok];                   # if this one becomes a user he could change it
        acl_default($this,$current_user);

        $this->modified[] = array ( "field" => "created" ,
                                    "old" => $this->getType() ,
                                    "new" => $this->id,
                                    "obj_id" => $this->id
                                  );
      }
      $q->addFV("creator",$this->creator,"OBJ");
      $query = $q->getInsert();
    } else {
      $q->addWC("id",$this->id,"");
      $query = $q->getUpdate();
    }


    $this->dbconn->Exec($query);
    $msg .= parent::save();

    # The Owner can delete his picture
    if ( ($this->pic_file != -1) && ($this->pic_file->id > 0) ) {
      acl_raise($this->pic_file,$this->id,$tutos[delok]);
      $msg .= acl_save($this->pic_file);
    }

    return $msg;
  }
  /**
   * fill mailing list
   * this will work recursive and add all members
   * and subteam members to the given mailing list
   */
  function fill_maillist(&$ml) {
    $ml[$this->id] = &$this;
    return;
  }
  /**
   * Read all locations data and find the email adr.
   */
  function default_email() {
    if ( ! $this->rl2 ) {
      $this->read_locs_data();
    };
    $e = "";

    if ( isset($this->locall) ) {
	  foreach($this->locall as $i => $f) {
        if ( $f->email_1 != "") {
          $e = $f->email_1;
          if ( $f->category == 2 ) {
            return $e;
          }
        } elseif ( $f->email_2 != "" ) {
          $e = $f->email_1;
          if ( $f->category == 2 ) {
            return $e;
          }
        }
      }
    }
    return $e;
  }
  /**
   * Return a URL to this address
   */
  function getURL() {
    global $callink;
    #return $callink ."address_show&id=". $this->id;
  }
  /**
   * Return a URL to modify this address
   */
  function getModURL() {
    global $callink;
    #return $callink . "address_new&id=". $this->id;
  }
  /**
   * Return a URL to delete this address
   */
  function getDelURL() {
    #return "address_del.php?id=". $this->id;
  }
  /**
   * Return a link to this address
   */
  function getLink($text = "") {
    global $lang;

    if (empty($this->id)) return;
    if ($this->id == -1) {
      return $this->getFullName();
    }
    if ( empty($text) ) {
      $text = $this->getFullname();
    }

    if ( ! $this->see_ok() ) {
      return myentities($text);
    }

    $plus = $this->getPopInfo();

    return makelink($this->getURL(),myentities($text),sprintf($lang['SeeAddress'],$this->getFullname()),$plus);
  }
  /**
   * Return a Mail link to this address
   */
  function getMailLink($email = "" ,$text = "" ) {
    global $lang;

    if (empty($this->id)) return "";

    $fn = $this->getFullname();

    if ( $email == "" ) {
      $email = $this->default_email();
    }
    if ( $text == "" ) {
      $text = myentities($fn);
    }

    if (empty($email)) {
      return $this->getLink($text);
    } else {
      return asEmail($fn,$email,$fn);
    }
  }
  /**
   * Delete this address from the DB
   */
  function delete () {
    global $current_user;

    $msg = "";
    if ($this->gettype() == "address") {
      $this->read_locs_data();

      foreach($this->location as $f) {
        $msg .= $f->delete();
      }

      $q = "DELETE FROM ". $this->tablename ." WHERE id = ". $this->id;
      $r = $this->dbconn->Exec($q);

      if ( $this->pic_id > 0 ) {
        $q = "DELETE FROM ". $this->dbconn->prefix ."files WHERE id = ". $this->pic_id;
        $r = $this->dbconn->Exec($q);
      }

#    $msg .= tutos_file::obj_delete($current_user,$this);
      $msg .= appointment::obj_delete($current_user,$this);
      $msg .= task::obj_delete($current_user,$this);
      $msg .= product::obj_delete($current_user,$this);
      $msg .= team::obj_delete($current_user,$this);
    }
    $msg .= parent::delete();
    return $msg;
  }
  /**
   * Checks if this person is a user of the system
   */
  function isUser () {
    if ( is_object($this->user) ) {
      return 1;
    } 
    $q = "SELECT a.* ,p.*,p.id as u_id FROM ". $this->dbconn->prefix ."addresses a, ". $this->dbconn->prefix ."people p WHERE a.id = ". $this->id ." AND a.id = p.adr_id";
    $r = $this->dbconn->Exec($q);
    $n = $r->numrows();
    if ( $n > 0 ) {
      $this->user = new tutos_user($this->dbconn);
      $this->user->read_result($r,0);
    }
    $r->free();
    return $n;
  }
  /**
   * Data of XML export
   */
  function exportXML_body ($only_ids = false) {
    $this->read_locs_data();
    $r = parent::exportXML_body();
    if (!$only_ids) {
    $r .=  "<title>". utf8_encode(htmlspecialchars($this->title)) ."</title>\n";
    $r .=  "<firstname>". utf8_encode(htmlspecialchars($this->f_name)) ."</firstname>\n";
    $r .=  "<middlename>". utf8_encode(htmlspecialchars($this->m_name)) ."</middlename>\n";
    $r .=  "<lastname>". utf8_encode(htmlspecialchars($this->l_name)) ."</lastname>\n";
    if ( $this->birthday->notime != 1 ) {
      $r .=  "<birthday>". $this->birthday->exportXML_body() ."</birthday>\n";
    }
    if ( isset($this->location) && (count($this->location) > 0) ) {
      foreach($this->location as $i => $f) {
        $r .= $f->exportXML_start();
          $r .= $f->exportXML_body($only_ids);
        $r .= $f->exportXML_end();
      }
    }
    }
    return $r;
  }
  /**
   * parse XML import
   */
  function parseXML ($fld,$data,$attrs) {
    parent::parseXML($fld,$data,$attrs);
    if ($fld == "title") {
      $this->setTitle($data);
    } else if ($fld == "firstname") {
      $this->setFName($data);
    } else if ($fld == "middlename") {
      $this->setMName($data);
    } else if ($fld == "lastname") {
      $this->setLName($data);
    } else if ($fld == "birthday") {
      $d = new DateTime($data);
      $this->setBirthday($d);
    }
    return;
  }
  /**
   * Return a vcard for this address
   */
  function getVcard() {
    $this->read_locs_data();
    $ical = "";
    $ical .= "BEGIN:VCARD\n";
    $ical .= "VERSION:3.0\n";
    $ical .= "UID:". $this->id ."\n";
    $ical .= "N:" . $this->l_name .";". $this->f_name ."\n";
    $ical .= "FN:" . $this->getFullName() ."\n";
    if ( isset($this->location) && (count($this->location) > 0) ) {
      foreach($this->location as $i => $f) {
        if ( $f->email_1 != "" ) {
          $ical .= "EMAIL;TYPE=INTERNET:" . $f->email_1 ."\n";
        }
        if ( $f->email_2 != "" ) {
          $ical .= "EMAIL;TYPE=INTERNET:" . $f->email_2 ."\n";
        }
        if ( $f->phone_1 != "" ) {
          if ( $f->category == 2 ) {
            $ical .= "TEL;TYPE=WORK:" . $f->phone_1 ."\n";
          } else {
            $ical .= "TEL;TYPE=HOME:" . $f->phone_1 ."\n";
          }
        }
        if ( $f->phone_2 != "" ) {
          if ( $f->category == 2 ) {
            $ical .= "TEL;TYPE=WORK:" . $f->phone_2 ."\n";
          } else {
            $ical .= "TEL;TYPE=HOME:" . $f->phone_2 ."\n";
          }
        }
        if ( $f->fax_1 != "" ) {
          if ( $f->category == 2 ) {
            $ical .= "TEL;TYPE=WORK,FAX:" . $f->fax_1 ."\n";
          } else {
            $ical .= "TEL;TYPE=HOME,FAX:" . $f->fax_1 ."\n";
          }
        }
        if ( ($f->company->id != -1) && ($f->company->name != "") ) {
          $ical .= "ORG:" . $f->company->name ."\n";
        }
      }
    }
    if ( $this->birthday->notime != 1 ) {
      $ical .= "BDAY:". $this->birthday->year ."-". $this->birthday->month ."-". $this->birthday->day ."\n";
    }
    $ical .= "END:VCARD\n";
    return $ical;
  }
  /**
   * get the type of object
   */
  function gettype () {
    return "address";
  }
  /**
   * get the type id of object
   */
  function gettypeid () {
    return useaddressbook;
  }
  /**
   * get the type id of object
   */
  function getHtmlIcon () {
    return 'addresses';
  }
  /* ---------------------------------------------------------------------------
   * The following methods are abstract factory functions for groups
   * which handle the membership list of an object
   * --------------------------------------------------------------------------- */
  /**
   * create a link to a select page
   */
  function getSelectLink (&$user,$text = "") {
    global $lang,$tutos;
    if ( ! $user->feature_ok(useaddressbook,PERM_SEL) ) {
      return;
    }
    return array( url => "address_select.php",
                  image => $user->layout->theme->getImage(tutos_address::getHtmlIcon(),'menu'),
                  text => ($text == "" ? $lang['Addresses'] : $text),
                  info => $lang['SearchForAdr'],
                  category => array("search","address")
                );
  }
  /**
   * get the help index
   */
  function getHelpIndex () {
    global $lang;

	$r = "";
    $r .= "<h3>". makelink("help.php?p=glossary#address",$lang['Address'],$lang['Address']) ."</h3><ul>\n";
    $r .= "<li>". makelink("help.php?p=address_new",$lang["NewEntry"]."/". $lang["Modify"],$lang["NewEntry"]."/". $lang["Modify"]) ."</li>\n";
    $r .= "<li>". makelink("help.php?p=address_show",$lang["show"],$lang["show"]) ."</li>\n";
    $r .= "<li>". makelink("help.php?p=address_overview",$lang['AddressOverview'],$lang['AddressOverview'])."</li>\n";
    $r .= "</ul>\n";
	return $r;
  }
}
?>
